name: Deploy to DigitalOcean

on: 
  workflow_dispatch

env:
  DOCKERHUB_USER: dvillaj
  IMAGE_NAME: jupyterlab-pandas
  IMAGE_LABEL: latest
  
  DUCKDNS_DOMAIN: jupyterlab-pandas

  DROPLET_NAME: jupyterlab-droplet
  DROPLET_SIZE: s-1vcpu-1gb
  DROPLET_REGION: LON1
  DROPLET_IMAGE: docker-20-04
  DROPLET_TAG: jupyterlab

  DEPLOY_DIR: /opt/deploy

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check Docker Image
        run: |

          TOKEN=$( curl -sSLd "username=${{ env.DOCKERHUB_USER }}&password=${{ secrets.DOCKERHUB_TOKEN}}" https://hub.docker.com/v2/users/login | jq -r ".token" )
          curl -sH "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/tags/${DOCKER_TAG}/" | jq .



          export REGISTRY=https://index.docker.io/v1/
          echo ${{ secrets.DOCKERHUB_TOKEN }} || docker login -u ${{ env.DOCKERHUB_USER }}  --password-stdin $REGISTRY
          docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.IMAGE_LABEL }} > /dev/null

          retVal=$?
          if [ $retVal -ne 0 ]; then
            echo "Docker image does not exists :-("
          else 
            echo "Docker image does exists. Good :-)"
          fi
          exit $retVal


      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check JupyterLab Droplet
        run: |
          DO_ID=$(doctl compute droplet list \
                --tag-name ${{ env.DROPLET_TAG }}  \
                --no-header \
                --format ID)

          if [ -z "$DO_ID" ]
          then
              echo "JupyterLab Droplet does not exist. Good :-)"
          else
              echo "JupyterLab Droplet exists. Destroy it before execute this action!"
              exit 1
          fi

      - name: Create SSH key and publish to DigitalOcean
        id: create_ssh_id
        run: |
          ssh-keygen -m PEM -N "" -f ~/digitalocean 

          SSH_KEY_PUBLIC=$(cat ~/digitalocean.pub)
          DO_SSH_KEY_ID=$(doctl compute ssh-key create github --verbose --public-key "$SSH_KEY_PUBLIC" --no-header --format ID)

          SSH_KEY=$(cat ~/digitalocean)
          SSH_KEY="${SSH_KEY//$'\n'/'%0A'}"

          echo ::set-output name=key_id::$DO_SSH_KEY_ID
          echo ::set-output name=ssh_key_private::$SSH_KEY

      - name: Collect actual SSH Keys
        id: actual_keys
        run: |
          SSH_KEYS=$(doctl compute ssh-key list --no-header --format ID |  tr '\n' ',')          
          echo ::set-output name=keys_id::"${SSH_KEYS::-1}"

      - name: Create JupyterLab Droplet
        id: create_droplet
        run: |
          DO_PUBLIC_IP=$(doctl compute droplet create ${{ env.DROPLET_NAME }} \
                --image ${{ env.DROPLET_IMAGE}} \
                --region ${{ env.DROPLET_REGION }} \
                --size ${{ env.DROPLET_SIZE }} \
                --tag-name ${{ env.DROPLET_TAG }} \
                --ssh-keys "${{ steps.actual_keys.outputs.keys_id }}" \
                --wait \
                --no-header \
                --format PublicIPv4)

          echo ::set-output name=public_ip::$DO_PUBLIC_IP

      - name: Destroy SSH Key
        run: |
          doctl compute ssh-key delete ${{ steps.create_ssh_id.outputs.key_id }} --force         

      - name: Get latest code
        uses: actions/checkout@v2  

        # We have to give some time to the droplet for starting the SSH service
      - name: Sleeping ...
        run: |
          sleep 15

      - name: Create Deploy Directory
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ steps.create_droplet.outputs.public_ip }}
          key: "${{ steps.create_ssh_id.outputs.ssh_key_private }}"
          username: root
     
          script: |
            mkdir ${{ env.DEPLOY_DIR }}

      - name: Deploy files
        uses: wlixcc/SFTP-Deploy-Action@v1.0
        with:
          username: 'root'
          server: ${{ steps.create_droplet.outputs.public_ip }}
          ssh_private_key: "${{ steps.create_ssh_id.outputs.ssh_key_private }}"
          local_path: './resources/digitalocean/*'
          remote_path: '${{ env.DEPLOY_DIR }}'          

      - name: Deploy Services
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ steps.create_droplet.outputs.public_ip }}
          key: ${{ steps.create_ssh_id.outputs.ssh_key_private }}
          username: root
     
          script: |
            mkdir -p /opt/jupyterlab/notebooks

            export JUPYTERLAB_TOKEN=${{ secrets.JUPYTERLAB_TOKEN }}
            export JUPYTERLAB_IMAGE=${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_LABEL }}
            export DEPLOY_DIR=${{ env.DEPLOY_DIR }}

            sh $DEPLOY_DIR/deploy.sh

            curl https://www.duckdns.org/update/${{ env.DUCKDNS_DOMAIN }}/${{ secrets.DUCKDNS_TOKEN }}